// <auto-generated />
using System;
using Starter_NET_7.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Starter_NET_7.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Starter_NET_7.Database.Models.Permission", b =>
                {
                    b.Property<int>("IdPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_PERMISSION");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPermission"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATION_DATE");

                    b.Property<int?>("LastUpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("LAST_UPDATE_BY");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATE_DATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("NAME");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("STATUS");

                    b.HasKey("IdPermission");

                    b.ToTable("PERMISSIONS", (string)null);

                    b.HasData(
                        new
                            {
                                IdPermission = 1,
                                CreatedBy = 1,
                                CreationDate = new DateTime(2023, 5, 23, 12, 26, 1, 140, DateTimeKind.Local).AddTicks(1597),
                                Name = "Roles",
                                Status = true
                            },
                        new
                            {
                                IdPermission = 2,
                                CreatedBy = 1,
                                CreationDate = new DateTime(2023, 5, 23, 12, 26, 1, 140, DateTimeKind.Local).AddTicks(1611),
                                Name = "Users",
                                Status = true
                            });
                });

            modelBuilder.Entity("Starter_NET_7.Database.Models.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ROLE");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRole"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATION_DATE");

                    b.Property<int?>("LastUpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("LAST_UPDATE_BY");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATE_DATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAME");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("STATUS");

                    b.HasKey("IdRole");

                    b.ToTable("ROLES", (string)null);

                    b.HasData(
                        new
                            {
                                IdRole = 1,
                                CreatedBy = 1,
                                CreationDate = new DateTime(2023, 5, 23, 12, 26, 1, 140, DateTimeKind.Local).AddTicks(1497),
                                Name = "Root",
                                Status = true
                            },
                        new
                            {
                                IdRole = 2,
                                CreatedBy = 1,
                                CreationDate = new DateTime(2023, 5, 23, 12, 26, 1, 140, DateTimeKind.Local).AddTicks(1554),
                                Name = "Admin",
                                Status = true
                            });
                });

            modelBuilder.Entity("Starter_NET_7.Database.Models.UnionPermissionsRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("ROLE_ID");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("PERMISSION_ID");

                    b.Property<int>("AssignedBy")
                        .HasColumnType("int")
                        .HasColumnName("ASSIGNED_BY");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ASSIGNED_DATE");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("STATUS");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("PK_PERMISSIONS_ROLES");

                    b.HasIndex("PermissionId");

                    b.ToTable("UNION_PERMISSIONS_ROLES", (string)null);

                    b.HasData(
                        new
                            {
                                RoleId = 1,
                                PermissionId = 1,
                                AssignedBy = 1,
                                AssignedDate = new DateTime(2023, 5, 23, 12, 26, 1, 140, DateTimeKind.Local).AddTicks(1624),
                                Status = true
                            },
                        new
                            {
                                RoleId = 1,
                                PermissionId = 2,
                                AssignedBy = 1,
                                AssignedDate = new DateTime(2023, 5, 23, 12, 26, 1, 140, DateTimeKind.Local).AddTicks(1635),
                                Status = true
                            },
                        new
                            {
                                RoleId = 2,
                                PermissionId = 1,
                                AssignedBy = 1,
                                AssignedDate = new DateTime(2023, 5, 23, 12, 26, 1, 140, DateTimeKind.Local).AddTicks(1642),
                                Status = true
                            },
                        new
                            {
                                RoleId = 2,
                                PermissionId = 2,
                                AssignedBy = 1,
                                AssignedDate = new DateTime(2023, 5, 23, 12, 26, 1, 140, DateTimeKind.Local).AddTicks(1649),
                                Status = true
                            });
                });

            modelBuilder.Entity("Starter_NET_7.Database.Models.UnionPermissionsUser", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("PERMISSION_ID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.Property<int>("AssignedBy")
                        .HasColumnType("int")
                        .HasColumnName("ASSIGNED_BY");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ASSIGNED_DATE");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("STATUS");

                    b.HasKey("PermissionId", "UserId")
                        .HasName("PK_PERMISSIONS_USERS");

                    b.HasIndex("UserId");

                    b.ToTable("UNION_PERMISSIONS_USERS", (string)null);

                    b.HasData(
                        new
                            {
                                PermissionId = 1,
                                UserId = 1,
                                AssignedBy = 1,
                                AssignedDate = new DateTime(2023, 5, 23, 12, 26, 1, 140, DateTimeKind.Local).AddTicks(1662),
                                Status = true
                            },
                        new
                            {
                                PermissionId = 2,
                                UserId = 1,
                                AssignedBy = 1,
                                AssignedDate = new DateTime(2023, 5, 23, 12, 26, 1, 140, DateTimeKind.Local).AddTicks(1672),
                                Status = true
                            });
                });

            modelBuilder.Entity("Starter_NET_7.Database.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_USER");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATION_DATE");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LAST_NAME");

                    b.Property<int?>("LastUpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("LAST_UPDATE_BY");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATE_DATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NAME");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("PASSWORD");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("ROLE_ID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("STATUS");

                    b.HasKey("IdUser");

                    b.HasIndex("RoleId");

                    b.ToTable("USERS", (string)null);

                    b.HasData(
                        new
                            {
                                IdUser = 1,
                                CreatedBy = 1,
                                CreationDate = new DateTime(2023, 5, 23, 12, 26, 1, 140, DateTimeKind.Local).AddTicks(1566),
                                Email = "superuser@mail.com",
                                LastName = "User",
                                Name = "Super",
                                Password = "$2a$11$aMKwWQmIv5iVvOY/ysJhK.OrZ4mifA0fGw7uELtr2MkOgwkE5Fm22",
                                RoleId = 1,
                                Status = true
                            });
                });

            modelBuilder.Entity("Starter_NET_7.Database.Models.UserValidation", b =>
                {
                    b.Property<int>("IdUserValidation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_USER_VALIDATION");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUserValidation"));

                    b.Property<DateTime?>("ForgotPasswordExpiry")
                        .HasColumnType("datetime")
                        .HasColumnName("FORGOT_PASSWORD_EXPIRY");

                    b.Property<string>("ForgotPasswordUuid")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("FORGOT_PASSWORD_UUID");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("REFRESH_TOKEN");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime")
                        .HasColumnName("REFRESH_TOKEN_EXPIRY");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("IdUserValidation");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("USER_VALIDATION", (string)null);

                    b.HasData(
                        new
                            {
                                IdUserValidation = 1,
                                UserId = 1
                            });
                });

            modelBuilder.Entity("Starter_NET_7.Database.Models.UnionPermissionsRole", b =>
                {
                    b.HasOne("Starter_NET_7.Database.Models.Permission", "Permission")
                        .WithMany("UnionPermissionsRoles")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_PERMISSIONS_ROLES_PERMISSIONS");

                    b.HasOne("Starter_NET_7.Database.Models.Role", "Role")
                        .WithMany("UnionPermissionsRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_PERMISSIONS_ROLES_ROLES");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Starter_NET_7.Database.Models.UnionPermissionsUser", b =>
                {
                    b.HasOne("Starter_NET_7.Database.Models.Permission", "Permission")
                        .WithMany("UnionPermissionsUsers")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_PERMISSIONS_USERS_PERMISSIONS");

                    b.HasOne("Starter_NET_7.Database.Models.User", "User")
                        .WithMany("UnionPermissionsUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PERMISSIONS_USERS_USERS");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Starter_NET_7.Database.Models.User", b =>
                {
                    b.HasOne("Starter_NET_7.Database.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_USERS_ROLES");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Starter_NET_7.Database.Models.UserValidation", b =>
                {
                    b.HasOne("Starter_NET_7.Database.Models.User", "User")
                        .WithOne("UserValidation")
                        .HasForeignKey("Starter_NET_7.Database.Models.UserValidation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Starter_NET_7.Database.Models.Permission", b =>
                {
                    b.Navigation("UnionPermissionsRoles");

                    b.Navigation("UnionPermissionsUsers");
                });

            modelBuilder.Entity("Starter_NET_7.Database.Models.Role", b =>
                {
                    b.Navigation("UnionPermissionsRoles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Starter_NET_7.Database.Models.User", b =>
                {
                    b.Navigation("UnionPermissionsUsers");

                    b.Navigation("UserValidation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
